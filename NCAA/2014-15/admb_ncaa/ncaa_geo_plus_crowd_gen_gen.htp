#if !defined(_admb_ncaa_ncaa_geo_plus_crowd_gen_gen_)
#  define _admb_ncaa_ncaa_geo_plus_crowd_gen_gen_

class model_data : public ad_comm{
  data_int nobs;
  data_number decaymod;
  data_ivector hscore;
  data_ivector ascore;
  data_vector hteam;
  data_vector ateam;
  data_vector yearlag;
  data_vector hmean;
  data_vector amean;
  data_vector distance;
  data_vector attendance;
  data_ivector iconf;
  data_ivector hbias;
  data_int nobs;
  data_number decaymod;
  data_ivector hscore;
  data_ivector ascore;
  data_vector hteam;
  data_vector ateam;
  data_vector yearlag;
  data_vector hmean;
  data_vector amean;
  data_vector distance;
  data_vector attendance;
  data_ivector iconf;
  data_ivector hbias;
  data_int dummy;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value f;
  param_init_bounded_vector att;
  param_init_bounded_vector def;
  param_init_bounded_number dcf;
  param_init_bounded_number ccf;
  param_init_bounded_number hcf;
  param_init_bounded_number icf;
  param_number lamda;
  param_number mu;
  param_number p;
  param_number weight;
  param_number mean_weight;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}

};
#endif
